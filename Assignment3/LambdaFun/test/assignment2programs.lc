-- member
rec member = \x. \y. case y of { 
    [] -> false, 
    (a:as) -> case x == a of { true -> true, _ -> member x as } } ;;

-- remove
rec remove = \x. \y. case y of {
    [] -> [],
    (a:as) -> case a == x of { true -> as, _ -> a : (remove x as) } } ;;

-- sum
rec sum = \x. case x of {
    [] -> 0, 
    (a:as) -> a + sum as } ;;

-- prod
rec prod = \x. case x of {
    [] -> 1,
    (a:as) -> a * prod as } ;;

-- plus two
val plustwo = \x. x+2 ;;

-- insert
rec insert = \x. \y. case y of {
    [] -> [x],
    (a:as) -> case x <= a of { true -> x:(a:as), _ -> a:(insert x as) } } ;;

-- sort
rec sort = \x. case x of {
    [] -> [],
    (a:as) -> insert a (sort as) } ;;